{
  "_id": "@nrk/core-suggest",
  "_rev": "45-4d300d148a76bb3697d8f4246f869712",
  "name": "@nrk/core-suggest",
  "dist-tags": {
    "latest": "1.1.3"
  },
  "versions": {
    "1.1.3": {
      "name": "@nrk/core-suggest",
      "homepage": "https://static.nrk.no/core-components/latest/",
      "author": {
        "name": "NRK",
        "email": "opensource@nrk.no",
        "url": "https://www.secondurlwhichischangedfortesting.no/"
      },
      "version": "1.1.3",
      "license": "MIT",
      "main": "core-suggest.cjs.js",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/nrkno/core-components.git"
      },
      "description": "<!-- <script src=\"https://unpkg.com/preact\"></script> <script src=\"https://unpkg.com/preact-compat\"></script> <script>   window.React = preactCompat   window.ReactDOM = preactCompat </script> --> <!--demo <script src=\"https://unpkg.com/@webcomponents/cust",
      "bugs": {
        "url": "https://github.com/nrkno/core-components/issues"
      },
      "_id": "@nrk/core-suggest@1.1.3",
      "_nodeVersion": "12.1.0",
      "_npmVersion": "6.13.0",
      "dist": {
        "integrity": "sha512-g6pNmDWBXUhB1voT3qQhNxicf6Q+cuw818p4cTvd4QqLHYOCsgDVQgSRT/KPHn3+VmN7942BcG6V3e2bGtCbeA==",
        "shasum": "c11071f001c34176f64592b56c73dfeb7c5b433d",
        "tarball": "https://registry.npmjs.org/@nrk/core-suggest/-/core-suggest-1.1.3.tgz",
        "fileCount": 12,
        "unpackedSize": 193678,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd08nhCRA9TVsSAnZWagAAQKUP/1jziug477AM2UV1MVAq\n8GOi9C/F2dtANhLfVxvaqOpSKODuVTcWKJa+Ws9MiUCAy4zjX2Yuqn8aNYI8\nlce6TRWpfIaF27BJHwnjSXCTtWqIk2M+TFvAO/YesooaUcn3cL5q1g38Tt4e\nnP5dT3Ag40a1bYw1SsPsysh/v+L4V1Umk8waJNeeWgNsO7NOmfJB0Yav0nL0\nQNJdS34MWWcxkw7Pg/8KWuntPh/hXGg0gmNqF+VcCY7XoKGlGCER0WWP3oF0\nDO+84nRmzHmybIUxi0GIPqBIkpPybwvt1VlrOqhCASFmJShF+BsktE1SXYVH\nqKOPxbo9RE1DTbs2s1dJuE+TYuQurJDYLp8FLHk7PjsJKssgLkNpjmQrYn22\n5T8K6XrKn3lknEZyoOcmAiP+OS4+sUXRdn9v4ank7Rz/NP9HTXNOjuJzx6Dm\nNVypCA1cJZqPkXK7/F0lkR0IliqYodjjMNJGsWH1Rk4+OqgNevsNBP43IJCk\nhfKyoFkHm0zqCwW3Xd9GAJ1BQSS4UFNtMyVbQyRKDVPlllvHGOwXg3/GofwU\nJn35ElEq1OHyDia1CeqDuC9GTU+DdS2NvOVLFvx5xOnyEqOQRYg0zgl+fq26\nYM1+7dmLYhZxAFhlYUyOVmhgsHnhbq7xv/EnEHVDyRhNbEk6qCNBSGN9b3iD\nyWHz\r\n=okYC\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "maintainers": [
        {
          "email": "simon.takite@gmail.com",
          "name": "absolootly"
        },
        {
          "email": "aevar@eggertsson.org",
          "name": "aevare"
        },
        {
          "email": "me@agnethesoraa.com",
          "name": "agnethesoraa"
        },
        {
          "email": "ajaco92@gmail.com",
          "name": "ajaco"
        },
        {
          "email": "anders.can1@gmail.com",
          "name": "anderscan"
        },
        {
          "email": "lien.anders@gmail.com",
          "name": "andersli"
        },
        {
          "email": "anders.ween@gmail.com",
          "name": "andipodnrk"
        },
        {
          "email": "andreas.qvenild@gmail.com",
          "name": "andorpandor"
        },
        {
          "email": "annichen.woll.eide@nrk.no",
          "name": "annichenwe"
        },
        {
          "email": "aril.spetalen@gmail.com",
          "name": "aspetalen"
        },
        {
          "email": "andre.stokke@nrk.no",
          "name": "astokke"
        },
        {
          "email": "bard.lind@gmail.com",
          "name": "baardl"
        },
        {
          "email": "contact@balte.nl",
          "name": "balte"
        },
        {
          "email": "bjoerneirik@gmail.com",
          "name": "brneirik"
        },
        {
          "email": "christian.karlsson9@gmail.com",
          "name": "christiankarlsson9"
        },
        {
          "email": "cristobal@dabed.org",
          "name": "cristobal"
        },
        {
          "email": "christian.sletten.eide@nrk.no",
          "name": "cseide"
        },
        {
          "email": "dan.huluka@gmail.com",
          "name": "danhul"
        },
        {
          "email": "danielengebretsen1@gmail.com",
          "name": "daniel.engebretsen"
        },
        {
          "email": "dh-ops@nrk.no",
          "name": "dhdeploy"
        },
        {
          "email": "jaj+npmjs@dynamicdiscord.org",
          "name": "discobus"
        },
        {
          "email": "eirik.backer@nrk.no",
          "name": "eirikbacker"
        },
        {
          "email": "eivind@loom.no",
          "name": "eivind"
        },
        {
          "email": "mayurathan.thiruchelvam@nrk.no",
          "name": "emte123"
        },
        {
          "email": "erik.salhus@gmail.com",
          "name": "eriksalhus"
        },
        {
          "email": "erlend.jones@gmail.com",
          "name": "erlend.jones"
        },
        {
          "email": "erlijoh@hotmail.com",
          "name": "erlijoh"
        },
        {
          "email": "erlend.wiig@nrk.no",
          "name": "erlord"
        },
        {
          "email": "eshaswini@gmail.com",
          "name": "eshaswini"
        },
        {
          "email": "espenwa@gmail.com",
          "name": "espenwa"
        },
        {
          "email": "evjand@gmail.com",
          "name": "evjand"
        },
        {
          "email": "fredrik@vol11.com",
          "name": "frdrks"
        },
        {
          "email": "geir.tonnessen@gmail.com",
          "name": "geirt"
        },
        {
          "email": "helgesilset+npm@gmail.com",
          "name": "gesi"
        },
        {
          "email": "glen.imrie@nrk.no",
          "name": "glenimrie"
        },
        {
          "email": "ola.christian.gundelsby@nrk.no",
          "name": "gundelsby-nrk"
        },
        {
          "email": "havard.moen@nrk.no",
          "name": "haavardm"
        },
        {
          "email": "hallvard.lid@gmail.com",
          "name": "hallvardlid"
        },
        {
          "email": "hjansson@gmail.com",
          "name": "haraldkj"
        },
        {
          "email": "herman.torjussen@gmail.com",
          "name": "htor"
        },
        {
          "email": "ingridguren@gmail.com",
          "name": "ingridguren"
        },
        {
          "email": "ingve.sund@gmail.com",
          "name": "ingvesund"
        },
        {
          "email": "ingvild.kihle@nrk.no",
          "name": "ingvildcath"
        },
        {
          "email": "janerikb@fastmail.com",
          "name": "janerikbr"
        },
        {
          "email": "jarle.lindseth@gmail.com",
          "name": "jarlelin"
        },
        {
          "email": "jenskm@gmail.com",
          "name": "jenskm"
        },
        {
          "email": "jesper@starkar.no",
          "name": "jesperstarkar"
        },
        {
          "email": "johannes.odland@nrk.no",
          "name": "johannesodland"
        },
        {
          "email": "johnarnesp@gmail.com",
          "name": "johnarne"
        },
        {
          "email": "jon.stale.carlsen@nrk.no",
          "name": "jonstalecarlsen"
        },
        {
          "email": "jostein.holje@gmail.com",
          "name": "jstnhlj"
        },
        {
          "email": "henriksen.bard@gmail.com",
          "name": "karamell"
        },
        {
          "email": "kjeldsenanders@gmail.com",
          "name": "kjeldsenanders"
        },
        {
          "email": "erik.inge.bolso@nrk.no",
          "name": "knan-nrk"
        },
        {
          "email": "knuthaug@gmail.com",
          "name": "knuthaug"
        },
        {
          "email": "kristoffer.dyrkorn@nrk.no",
          "name": "kristofferdyrkorn"
        },
        {
          "email": "sigurd@fosseng.net",
          "name": "laat"
        },
        {
          "email": "loftum@gmail.com",
          "name": "loftum"
        },
        {
          "email": "tom.lorentsen@gmail.com",
          "name": "lorecaster"
        },
        {
          "email": "lu.xing@nrk.no",
          "name": "lu-lux"
        },
        {
          "email": "marberglund@gmail.com",
          "name": "macbruker"
        },
        {
          "email": "mattis.folkestad@nrk.no",
          "name": "machineboy"
        },
        {
          "email": "undrum@gmail.com",
          "name": "mariusu"
        },
        {
          "email": "markus.voss@forse.no",
          "name": "markusv"
        },
        {
          "email": "martin.a.gundersen@gmail.com",
          "name": "martingundersen"
        },
        {
          "email": "martintorgersen@gmail.com",
          "name": "martintorgersen"
        },
        {
          "email": "mia.aasbakken@gmail.com",
          "name": "mianyaa"
        },
        {
          "email": "mikaelrinosolstad@gmail.com",
          "name": "mikaelrss"
        },
        {
          "email": "stian.moellersen@gmail.com",
          "name": "mollerse"
        },
        {
          "email": "bjornar.moltubakk@nrk.no",
          "name": "moltubakk"
        },
        {
          "email": "npm.morrow@gmail.com",
          "name": "morrow"
        },
        {
          "email": "morten.nyhaug@nrk.no",
          "name": "morten.nyhaug"
        },
        {
          "email": "morten.kjelling@nrk.no",
          "name": "mortenok"
        },
        {
          "email": "dan.kare.engebretsen@gmail.com",
          "name": "nordanke"
        },
        {
          "email": "anders.baggethun@gmail.com",
          "name": "notoriousbagge"
        },
        {
          "email": "ahmed.el-athamna@nrk.no",
          "name": "nrk-ark-deploy"
        },
        {
          "email": "n637154@nrk.no",
          "name": "nrk-jenkins"
        },
        {
          "email": "kurator@nrk.no",
          "name": "nrk-kurator-jenkins"
        },
        {
          "email": "william.almnes@nrk.no",
          "name": "nrk-midas-jenkins"
        },
        {
          "email": "tobias.lundin@nrk.no",
          "name": "nrk-ps-teamcity"
        },
        {
          "email": "sofie-devops@nrk.no",
          "name": "nrk-sofie-ci"
        },
        {
          "email": "nrksuper.web@nrk.no",
          "name": "nrk-sup-jenkins"
        },
        {
          "email": "linuxadmin@nrk.no",
          "name": "nrk-user-sync"
        },
        {
          "email": "richard.moe@nrk.no",
          "name": "nrkrichard"
        },
        {
          "email": "johan@nytamin.se",
          "name": "nytamin"
        },
        {
          "email": "ole.mikkel.sjolie@nrk.no",
          "name": "olemikkelnrk"
        },
        {
          "email": "trond@ovstetun.no",
          "name": "ovstetun"
        },
        {
          "email": "oyvind.holmstad@gmail.com",
          "name": "oyho"
        },
        {
          "email": "oyvindeh@fastmail.fm",
          "name": "oyvindeh"
        },
        {
          "email": "paul.k.egell.johnsen@gmail.com",
          "name": "pkej"
        },
        {
          "email": "alex@pope-industries.com",
          "name": "popeindustries"
        },
        {
          "email": "christian@rebnord.com",
          "name": "rebchr"
        },
        {
          "email": "roger.h.martinsen@gmail.com",
          "name": "rogerhmar"
        },
        {
          "email": "rognstad.ragnar@gmail.com",
          "name": "rognstadragnar"
        },
        {
          "email": "stein-roger.kringen@nrk.no",
          "name": "rolerboler"
        },
        {
          "email": "roy.gronmo@gmail.com",
          "name": "roygronmo"
        },
        {
          "email": "andreas@schjonhaug.com",
          "name": "schjonhaug"
        },
        {
          "email": "silje.enge.kristensen@nrk.no",
          "name": "silje"
        },
        {
          "email": "simen.brekken@gmail.com",
          "name": "simenbrekken"
        },
        {
          "email": "simon.mitternacht@nrk.no",
          "name": "simonmitternacht"
        },
        {
          "email": "sjurlur@gmail.com",
          "name": "sjurlur"
        },
        {
          "email": "snorre.e.brekke@gmail.com",
          "name": "snorreeb"
        },
        {
          "email": "snorre.berge@gmail.com",
          "name": "spesialsnorre"
        },
        {
          "email": "sindre.saegrov@gmail.com",
          "name": "ssaegrov"
        },
        {
          "email": "staale.stromme@gmail.com",
          "name": "steelflow"
        },
        {
          "email": "steipal@gmail.com",
          "name": "steipal"
        },
        {
          "email": "stian@stian.no",
          "name": "stiandg"
        },
        {
          "email": "stian@lundjohansen.no",
          "name": "stianlj"
        },
        {
          "email": "sverre.olnes@gmail.com",
          "name": "sverremann"
        },
        {
          "email": "sigurd.larsen@nrk.no",
          "name": "swla"
        },
        {
          "email": "tonje.broden@nrk.no",
          "name": "tbnrk"
        },
        {
          "email": "terje.meisingset@nrk.no",
          "name": "terjemeisingset"
        },
        {
          "email": "thohalv@gmail.com",
          "name": "thohalv"
        },
        {
          "email": "timkurvers@gmail.com",
          "name": "timkurvers"
        },
        {
          "email": "tinkajts@gmail.com",
          "name": "tinkajts"
        },
        {
          "email": "thorben@sjostrom.no",
          "name": "tobinus"
        },
        {
          "email": "toggu@toggu.com",
          "name": "toggu"
        },
        {
          "email": "tobias.lundin@gmail.com",
          "name": "tolu"
        },
        {
          "email": "tomivar@gmail.com",
          "name": "tomivar"
        },
        {
          "email": "reg+npm@toggen.no",
          "name": "torgeilo"
        },
        {
          "email": "tosh@tosh.no",
          "name": "toshb"
        },
        {
          "email": "vincent.andersson@nrk.no",
          "name": "vincent.andersson"
        },
        {
          "email": "william.almnes@gmail.com",
          "name": "wwalmnes"
        },
        {
          "email": "yosritimraz@gmail.com",
          "name": "yosrimti"
        },
        {
          "email": "andre.stokke@nrk.no",
          "name": "yr"
        },
        {
          "email": "christoffer@winterkvist.com",
          "name": "zenangst"
        }
      ],
      "_npmUser": {
        "name": "htor",
        "email": "herman.torjussen@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/core-suggest_1.1.3_1574160864619_0.9020712168940195"
      },
      "_hasShrinkwrap": false
    }
  },
  "time": {
    "created": "2019-05-21T08:20:50.106Z",
    "modified": "2020-01-09T09:00:48.886Z",
    "1.1.3": "2019-11-19T10:54:24.761Z"
  },
  "maintainers": [
    {
      "email": "ingrid.draagen@gmail.com",
      "name": "ingriddraagen"
    },
    {
      "email": "johannes.odland@nrk.no",
      "name": "johannesodland"
    }
  ],
  "description": "<!-- <script src=\"https://unpkg.com/preact\"></script> <script src=\"https://unpkg.com/preact-compat\"></script> <script>   window.React = preactCompat   window.ReactDOM = preactCompat </script> --> <!--demo <script src=\"https://unpkg.com/@webcomponents/cust",
  "homepage": "https://static.nrk.no/core-components/latest/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nrkno/core-components.git"
  },
  "author": {
    "name": "NRK",
    "email": "opensource@nrk.no",
    "url": "https://www.nrk.no/"
  },
  "bugs": {
    "url": "https://github.com/nrkno/core-components/issues"
  },
  "license": "MIT",
  "readme": "# Core Suggest\n\n<!-- <script src=\"https://unpkg.com/preact\"></script>\n<script src=\"https://unpkg.com/preact-compat\"></script>\n<script>\n  window.React = preactCompat\n  window.ReactDOM = preactCompat\n</script> -->\n<!--demo\n<script src=\"https://unpkg.com/@webcomponents/custom-elements\"></script>\n<script src=\"core-suggest/core-suggest.min.js\"></script>\n<script src=\"core-suggest/core-suggest.jsx.js\"></script>\n<style>\nli button:focus {outline: 3px solid rgb(94, 158, 215)}\nlabel {display: block}\n</style>\ndemo-->\n\n> `@nrk/core-suggest` enhances an input, providing keyboard accessible functionality for autocompletion,\n> search results and smart select box abilities and automatic highlighting. Results can be with fetched directly from markup\n> or from a custom endpoint with AJAX.\n\n\n## Example\n\n```html\n<!--demo-->\n<label for=\"my-input\">Search</label>\n<input id=\"my-input\" type=\"text\" placeholder=\"Type something...\">\n<core-suggest hidden>\n  <ul>\n    <li><button>Chro<b>me</b></button></li>\n    <li><button>Firefox</button></li>\n    <li><button>Opera</button></li>\n    <li><button>Safari</button></li>\n    <li><button>Microsoft Edge</button></li>\n  </ul>\n</core-suggest>\n```\n\n```html\n<!--demo-->\n<div id=\"jsx-input\"></div>\n<script type=\"text/jsx\">\n  ReactDOM.render(<div>\n    <label for=\"my-input-jsx\">Search JSX</label>\n    <input id='my-input-jsx' type='text' placeholder='Type something...' />\n    <CoreSuggest className='my-dropdown' hidden>\n      <ul>\n        <li><button>Chrome</button></li>\n        <li><button>Firefox</button></li>\n        <li><button>Opera</button></li>\n        <li><button>Safari</button></li>\n        <li><button>Microsoft Edge</button></li>\n      </ul>\n    </CoreSuggest>\n  </div>, document.getElementById('jsx-input'))\n</script>\n```\n\n## Installation\n\nUsing NPM provides own element namespace and extensibility.\nRecommended:\n\n```bash\nnpm install @nrk/core-suggest  # Using NPM\n```\n\nUsing static registers the custom element with default name automatically:\n\n```html\n<script src=\"https://static.nrk.no/core-components/major/7/core-suggest/core-suggest.min.js\"></script>  <!-- Using static -->\n```\n\nRemember to [polyfill](https://github.com/webcomponents/polyfills#custom-elements) custom elements if needed.\n\n\n## Usage\n\nTyping into the input toggles the [hidden attribute](https://developer.mozilla.org/en/docs/Web/HTML/Global_attributes/hidden) on items of type `<button>` and `<a>`, based on matching [textContent](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent) inside `<core-suggest>`. Focusing the input unhides the following element. The default filtering behavior can easily be altered through the `'suggest.select'`, `'suggest.filter'`, `'suggest.ajax'` and  `'suggest.ajax.beforeSend'` [events](#events).\n\nResults will be rendered in the element inside `<core-suggest>`.\nAlways use `coreSuggest.escapeHTML(String)` to safely render data from API or user.\n\n### HTML / JavaScript\n\n\n```html\n<input type=\"text\"                                      <!-- Must be a textual input element -->\n       list=\"{String}\">                                 <!-- Optional. Specify id of suggest element -->\n<core-suggest limit=\"{Number}\"                          <!-- Optional. Limit maxium number of result items. Defaults to Infinity -->\n              ajax=\"{String}\"                           <!-- Optional. Fetches external data. See event 'suggest.ajax'. Example: 'https://search.com?q={{value}}' -->\n              hidden>                                   <!-- Use hidden to toggle visibility -->\n  <ul>                                                  <!-- Can be any tag, but items should be inside <li> -->\n    <li><button>Item 1</button></li>                    <!-- Items must be <button> or <a> -->\n    <li><button value=\"Suprise!\">Item 2</button></li>   <!-- Alternative value can be defined -->\n    <li><a href=\"https://www.nrk.no/\">NRK.no</a></li>   <!-- Actual links are recommended when applicable -->\n  </ul>\n</core-suggest>\n```\n\n```js\nimport CoreSuggest from '@nrk/core-suggest'                 // Using NPM\nwindow.customElements.define('core-suggest', CoreSuggest)   // Using NPM. Replace 'core-suggest' with 'my-suggest' to namespace\n\nconst mySuggest = document.querySelector('core-suggest')\n\n// Getters\nmySuggest.ajax       // Get ajax URL value\nmySuggest.limit      // Get limit\nmySuggest.hidden     // Get hidden\nmySuggest.input      // Get input for suggest\n// Setters\nmySuggest.ajax = \"https://search.com?q={{value}}\"    // Set ajax endpoint URL for fetching external data.\nmySuggest.limit = 5                                  // Set limit for results\nmySuggest.hidden = false                             // Set hidden value\n// Methods\nmySuggest.escapeHTML('<span>...</span>')             // Utility function for escaping HTML string\n```\n\n### React / Preact\n\n```js\nimport CoreSuggest from '@nrk/core-suggest/jsx'\n\n<input type=\"text\"                         // First element result in an input-tag. Accepts both elements and components\n       list=\"{String}\" />                  // Optional. Specify id of suggest element\n<CoreSuggest id={String}                   // Suggestion list\n             hidden={Boolean}              // Use hidden to toggle visibility\n             limit={Number}                // Limit the maximum number of results in list.\n             ajax={String}                 // Fetches external data. See event 'suggest.ajax'. Example: 'https://search.com?q={{value}}'\n             ref={(comp) => {}}                   // Optional. Get reference to React component\n             forwardRef={(el) => {}}              // Optional. Get reference to underlying DOM custom element\n             onSuggestFilter={Function}           // See 'suggest.filter' event\n             onSuggestSelect={Function}           // See 'suggest.select' event\n             onSuggestAjax={Function}             // See 'suggest.ajax' event\n             onSuggestAjaxError={Function}        // See 'suggest.ajax.error' event\n             onSuggestAjaxBeforeSend={Function}>  // See 'suggest.ajax.beforeSend' event\n  <ul>                    // Next element will be used for items. Accepts both elements and components\n    <li><button>Item 1</button></li>                  // Interactive items must be <button> or <a>\n    <li><button value=\"Suprise!\">Item 2</button></li> // Alternative value can be defined\n    <li><a href=\"https://www.nrk.no/\">NRK.no</a></li> // Actual links are recommended when applicable\n  </ul>\n</CoreSuggest>\n```\n\n## Markup\n\n### With list\n\nPutting the input directly before the suggestion list is highly recommended, as this fulfills all accessibility requirements by default. There might be scenarios though, where styling makes this DOM structure impractical. In such cases, give the `<input>` a `list` attribute, and the `<core-suggest>` an `id` with corresponding value. Make sure there is no text between the input and the suggestion list, as this will break the experience for screen reader users:\n\n```html\n<label>\n  <input list=\"my-list\" type=\"text\" placeholder=\"...\">\n</label>\n<core-suggest id=\"my-list\" hidden>\n  ...\n</core-suggest>\n```\n\n\n## Events\n\n### suggest.filter\nFired before a default filtering occurs:\n\n```js\ndocument.addEventListener('suggest.filter', (event) => {\n  event.target      // The core-suggest element\n})\n```\n\n### suggest.select\nFired when an item is clicked/selected:\n\n```js\ndocument.addEventListener('suggest.select', (event) => {\n  event.target        // The core-suggest element\n  event.target.value  // The selected data\n  event.detail        // The selected element\n})\n```\n\n### suggest.ajax.beforeSend\nFired before sending debounced ajax requests. If you wish to alter the [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest), use `event.preventDefault()` and then execute [XHR methods](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Methods) on the `event.detail`. If not prevented, requests are sent using the `GET` method and the header `'X-Requested-With': 'XMLHttpRequest'`.\n\n```js\ndocument.addEventListener('suggest.ajax.beforeSend', (event) => {\n  event.target  // The core-suggest element\n  event.detail  // The XMLHttpRequest object\n})\n```\n\n```js\n// Example\ndocument.addEventListener('suggest.ajax.beforeSend', (event) => {\n  const xhr = event.detail\n  event.preventDefault() // Stop default behaviour\n  xhr.open('POST', 'https://example.com')\n  xhr.setRequestHeader('Content-Type', 'application/json')\n  xhr.setRequestHeader('my-custom-header', 'my-custom-value')\n  xhr.send(JSON.stringify({query: event.target.value}))\n})\n```\n\n### suggest.ajax\nFired when the input field receives data from ajax:\n\n```js\ndocument.addEventListener('suggest.ajax', (event) => {\n  event.target  // The core-suggest element\n  event.detail  // The XMLHttpRequest object\n  event.detail.responseText  // The response body text\n  event.detail.responseJSON  // The response json. Defaults to false if no valid JSON found\n})\n```\n\n### suggest.ajax.error\nFired when the request fails either due to a bad request (bad URL, non-200 response), an network error or a JSON parse error. Inspect `xhr.status` and `xhr.statusText` for bad requests and `xhr.responseError` for other errors:\n\n```js\ndocument.addEventListener('suggest.ajax.error', (event) => {\n  event.target  // The core-suggest element\n  event.detail  // The XMLHttpRequest object\n  event.detail.status         // The response status code\n  event.detail.statusText     // The response status text\n  event.detail.responseError  // The error message for ajax errors/json parse errors\n})\n```\n\n```js\n// Example\ndocument.addEventListener('suggest.ajax.error', (event) => {\n  const xhr = event.detail\n  if (xhr.status !== 200) {\n    if (xhr.responseError) {             // Network error / JSON parse error\n      console.log(xhr.responseError)     // Log error message\n    } else {                             // Bad request\n      console.log(xhr.statusText)        // Log status text\n      console.log(xhr.responseText)      // Log response text\n    }\n  }\n})\n```\n\n\n## Styling\nAll styling in documentation is example only. Both the `<button>` and content element receive attributes reflecting the current toggle state:\n\n```css\n.my-input {}                          /* Target input in any state */\n.my-input[aria-expanded=\"true\"] {}    /* Target only open button */\n.my-input[aria-expanded=\"false\"] {}   /* Target only closed button */\n\n.my-input-content {}                  /* Target content element in any state */\n.my-input-content:not([hidden]) {}    /* Target only open content */\n.my-input-content[hidden] {}          /* Target only closed content */\n\n.my-input-content :focus {}           /* Target focused item */\n.my-input-content mark {}             /* Target highlighted text (set `background: none;` to disable highlighting) */\n```\n\n\n## Notes\n\n### Ajax\n\nWhen using `@nrk/core-suggest` with the `ajax: https://search.com?q={{value}}` functionality, make sure to implement both a `Searching...` status (while fetching data from the server), and a `No hits` status (if server responds with no results). These status indicators are highly recommended, but not provided by default as the context of use will affect the optimal textual formulation. [See example implementation →](#example-ajax)\n\nIf you need to alter default headers, request method or post data, use the [`suggest.ajax.beforeSend` event  →](#input-ajax-beforesend)\n\n\n\n## Example: Ajax\n\nAjax requests can be stopped by calling `event.preventDefault()` on `'suggest.filter'`. Remember to always escape html and debounce requests when fetching data from external sources. The http request sent by `@nrk/core-suggest` will have header `X-Requested-With: XMLHttpRequest` for easier [server side detection and CSRF prevention](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#Protecting_REST_Services:_Use_of_Custom_Request_Headers).\n\n```html\n<!--demo-->\n<input id=\"my-input-ajax\" placeholder=\"Country...\">\n<core-suggest ajax=\"https://restcountries.eu/rest/v2/name/{{value}}?fields=name\" hidden></core-suggest>\n<script>\n  document.addEventListener('suggest.filter', (event) => {\n    const suggest = event.target\n    const input = suggest.input\n    const value = input.value.trim()\n\n    if (input.id !== 'my-input-ajax') return // Make sure we are on correct input\n    suggest.innerHTML = value ? `<ul><li><button>Searching for ${value}...</button></li></ul>` : ''\n  })\n  document.addEventListener('suggest.ajax', (event) => {\n    const suggest = event.target\n    const input = suggest.input\n    if (input.id !== 'my-input-ajax') return // Make sure we are on correct input\n    const items = event.detail.responseJSON\n    suggest.innerHTML = `<ul>${items.length ? items.slice(0, 10)\n      .map((item) => { return `<li><button>${suggest.escapeHTML(item.name)}</button></li>` })           // Generate list\n      .join('') : '<li><button>No results</button></li>'}</ul>`\n  })\n</script>\n```\n\n```html\n<!--demo-->\n<div id=\"jsx-input-ajax\"></div>\n<script type=\"text/jsx\">\n  class AjaxInput extends React.Component {\n    constructor (props) {\n      super(props)\n      this.onFilter = this.onFilter.bind(this)\n      this.onAjax = this.onAjax.bind(this)\n      this.state = { items: [], value: '' }\n    }\n    onFilter (event) {\n      const suggest = event.target\n      const value = suggest.input.value\n      const items = value ? [{name: `Searching for ${value}...`}] : []\n\n      this.setState({value, items}) // Store value for rendering\n    }\n    onAjax (event) {\n      const items = event.detail.responseJSON\n      this.setState({items: items.length ? items : [{name: 'No results'}]})\n    }\n    render () {\n      return <div>\n        <input type='text' placeholder='Country... (JSX)' />\n        <CoreSuggest\n         ajax=\"https://restcountries.eu/rest/v2/name/{{value}}?fields=name\"\n         onSuggestFilter={this.onFilter}\n         onSuggestAjax={this.onAjax}>\n          <ul>\n            {this.state.items.slice(0, 10).map((item, key) =>\n              <li key={key}>\n                <button>{item.name}</button>\n              </li>\n            )}\n          </ul>\n        </CoreSuggest>\n      </div>\n    }\n  }\n  ReactDOM.render(<AjaxInput />, document.getElementById('jsx-input-ajax'))\n</script>\n```\n\n\n\n## Example: Lazy\nHybrid solution; lazy load items, but let `core-suggest` still handle filtering:\n```html\n<!--demo-->\n<input id=\"my-input-lazy\" placeholder=\"Country...\">\n<core-suggest hidden></core-suggest>\n<script>\n  window.getCountries = (callback) => {\n    const xhr = new XMLHttpRequest()\n    const url = 'https://restcountries.eu/rest/v2/?fields=name'\n\n    xhr.onload = () => callback(JSON.parse(xhr.responseText))\n    xhr.open('GET', url, true)\n    xhr.send()\n  }\n\n  document.addEventListener('focus', (event) => {\n    if (event.target.id !== 'my-input-lazy') return // Make sure we are on correct input\n    const input = event.target\n    const suggest = input.nextElementSibling\n    input.id = '' // Prevent double execution\n    window.getCountries((items) => {\n      suggest.innerHTML = `<ul>${items.map((item) =>\n        '<li><button>' + suggest.escapeHTML(item.name) + '</button></li>'\n      ).join('')}</ul>`\n    })\n  }, true)\n</script>\n```\n\n```html\n<!--demo-->\n<div id=\"jsx-input-lazy\"></div>\n<script type=\"text/jsx\">\n  class LazyInput extends React.Component {\n    constructor (props) {\n      super(props)\n      this.onFocus = this.onFocus.bind(this)\n      this.state = {items: []}\n    }\n    onFocus (event) {\n      this.onFocus = null // Load items only on first interaction\n      window.getCountries((items) => this.setState({items})) // getCountries defined in JS\n    }\n    render () {\n      return <div>\n        <input type='text' placeholder='Country... (JSX)' onFocus={this.onFocus} />\n        <CoreSuggest>\n          <ul className='my-dropdown'>\n            {this.state.items.map((item, key) =>\n              <li key={key}><button>{item.name}</button></li>\n            )}\n          </ul>\n        </CoreSuggest>\n      </div>\n    }\n  }\n\n  ReactDOM.render(<LazyInput />, document.getElementById('jsx-input-lazy'))\n</script>\n```\n\n\n\n## Example: Dynamic\nSynchronous operation; dynamically populating items based input value:\n```html\n<!--demo-->\n<input id=\"my-input-dynamic\" placeholder=\"Type your email...\">\n<core-suggest hidden></core-suggest>\n<script>\n  document.addEventListener('suggest.filter', (event) => {\n    const suggest = event.target\n    const input = suggest.input\n    const value = input.value.trim()\n    const mails = ['facebook.com', 'gmail.com', 'hotmail.com', 'mac.com', 'mail.com', 'msn.com', 'live.com']\n\n    if (input.id !== 'my-input-dynamic') return // Make sure we are on correct input\n    event.preventDefault()\n    suggest.innerHTML = `<ul>${value ? mails.map((mail) => {\n      return '<li><button>' + value.replace(/(@.*|$)/, '@' + mail) + '</button></li>'\n    }).join('') : ''}</ul>`\n  })\n</script>\n```\n\n```html\n<!--demo-->\n<div id=\"jsx-input-dynamic\"></div>\n<script>\n  class DynamicInput extends React.Component {\n    constructor (props) {\n      super(props)\n      this.onFilter = this.onFilter.bind(this)\n      this.mails = ['facebook.com', 'gmail.com', 'hotmail.com', 'mac.com', 'mail.com', 'msn.com', 'live.com']\n      this.state = {items: []}\n    }\n    onFilter (event) {\n      const suggest = event.target\n      const value = suggest.input.value.trim()\n      const items = value ? this.mails.map((mail) => value.replace(/(@.*|$)/, `@${mail}`)) : []\n\n      event.preventDefault()\n      this.setState({value, items})\n    }\n    render () {\n      return <div>\n        <input type='text' placeholder='Type your email... (JSX)' />\n        <CoreSuggest onSuggestFilter={this.onFilter}>\n          <ul className='my-dropdown'>\n            {this.state.items.map((text, key) =>\n              <li key={key}><button>{text}</button></li>\n            )}\n          </ul>\n        </CoreSuggest>\n      </div>\n    }\n  }\n\n  ReactDOM.render(<DynamicInput />, document.getElementById('jsx-input-dynamic'))\n</script>\n```\n\n\n\n## FAQ\n\n### Why not use `<datalist>` instead?\nDespite having a native [`<datalist>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist) element for autocomplete lists, there are several issues regarding [browser support](https://caniuse.com/#feat=details), varying [accessibility](http://accessibleculture.org/articles/2012/03/screen-readers-and-details-summary/) support as well as no ability for custom styling or custom behavior.\n\n### Why is there only a subset of aria attributes in use?\nDespite well documented [examples in the aria 1.1 spesification](https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html), \"best practice\" simply becomes unusable in several screen reader due to implementation differences. `core-suggest` aims to provide a equally good user experience regardless if a screen reader passes events to browser or not (events are often hijacked for quick-navigation). Several techniques and attributes have been thoroughly tested:\n\n- `aria-activedescendant`/`aria-selected` - ignored in Android, lacks indication of list length in JAWS</li>\n- `aria-owns` - full list is read for every keystroke in NVDA</li>\n- `role=\"listbox\"` - VoiceOver needs aria-selected to falsely announce \"0 selected\"</li>\n- `role=\"option\"` - falsely announces links and buttons as \"text\"</li>\n- `aria-live=\"assertive\"` - fails to correctly inform user if current target is link or button</li>\n- `role=\"combobox\"` - skipped in iOS as VoiceOver fails to inform current field is editable</li>\n\n### How do I use core-suggest with multiple tags/output values?\nTagging and screen readers is a complex matter, requiring more than comma separated values. Currently, tagging is just a part of the wishlist for core-suggest. If tagging functionality is of interest for your project, please add a +1 to the [tagging task](https://github.com/nrkno/core-components/issues/9), describe your needs in a comment, and you'll be updated about progress.\n",
  "readmeFilename": "readme.md"
}